[init]
	defaultBranch = main
  templatedir = ~/.git_template
[push]
  default = current
[color]
	ui = true
[alias]
  # Basic Git commands
  st = status
  aa = add --all
  ap = add --patch
  ci = commit -v
  co = checkout
  pf = push --force-with-lease
  pl = pull
  ps = push
  merge-cleanup = "!bash ~/dotfiles/scripts/git_merge_feature_to_dev_and_main.sh"
  start-feature = "!bash ~/dotfiles/scripts/git_start_feature.sh"
  # Nuevo alias para commits con formato
  commit-format = "!f() { git commit -m \"$1($2): $3\"; }; f"
  # Nuevos aliases para logs y diffs mejorados
  prettylog = "!f() { base=${1:-dev}; echo 'üìã Historial de commits desde' $base; git log --color=always --pretty=format:\"%C(auto)%h %Cblue%ad %Cgreen%an %C(yellow)%s%Creset\" --date=format:\"%Y-%m-%d %H:%M\" --name-status --numstat \"$base\"..HEAD | tr -d '\\r' | sed '/^$/d'; }; f"
  diffstat = "!f() { base=${1:-dev}; echo 'üìä Estad√≠sticas de cambios desde' $base; git diff --stat --color=always \"$base\"..HEAD | tr -d '\\r' | sed '/^$/d'; }; f"
  # Nuevos aliases para gesti√≥n de tags
  taglist = "!git for-each-ref --sort=-creatordate --format='üè∑Ô∏è  %(color:yellow)%(refname:short)%(color:reset) | %(color:green)%(creatordate:format:%Y-%m-%d %H:%M)%(color:reset) | %(color:blue)%(objectname:short)%(color:reset)' refs/tags | tr -d '\\r' | sed '/^$/d'"
  tagsannotated = "tag -n99"
  tagshow = "!f() { if [ -z \"$1\" ]; then echo 'üìù Uso: git tagshow <tag>'; echo 'üìå Ejemplo: git tagshow v1.0.0'; else echo 'üîç Detalles del tag:' $1; git show --color=always \"$1\" | tr -d '\\r' | sed '/^$/d'; fi; }; f"
  # Nuevos aliases para comparaci√≥n de ramas
  prettysince = "!f() { base=${1:-dev}; echo 'üü¢ Commits en tu rama desde' $base '(lo que has a√±adido)'; git log --color=always --pretty=format:\"%C(auto)%h %Cblue%ad %Cgreen%an %C(yellow)%s%Creset\" --date=format:\"%Y-%m-%d %H:%M\" --name-status --numstat \"$base\"..HEAD | tr -d '\\r' | sed '/^$/d'; }; f"
  prettyuntil = "!f() { base=${1:-dev}; echo 'üî¥ Commits en' $base 'que te faltan (lo que necesitas actualizar)'; git log --color=always --pretty=format:\"%C(auto)%h %Cblue%ad %Cgreen%an %C(yellow)%s%Creset\" --date=format:\"%Y-%m-%d %H:%M\" --name-status --numstat HEAD..\"$base\" | tr -d '\\r' | sed '/^$/d'; }; f"

  # Branch management
  br = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate
  gbinfo = for-each-ref --sort=-committerdate refs/heads/ --format='%(color:yellow)%(refname:short)%(color:reset) - %(color:green)%(committerdate:short)%(color:reset) - %(color:blue)%(authorname)%(color:reset) - %(contents:subject)'
  cleanBranches = !sh -c 'git branch --merged | grep -v "main\\|master\\|dev\\|*" | xargs git branch -D'

  # Log commands
  lg = !git log --pretty=format:\"%C(magenta)%h%Creset -%C(red)%d%Creset %s %C(dim green)(%cr) [%an]\" --abbrev-commit -30
  log = 'git --no-pager log'
  glg = log --graph --oneline --all

  # Diff commands
  gdf = diff --color-words --word-diff=color
  gdfc = diff --color-words --word-diff=color -U3

  # Other useful commands
  undo = reset HEAD~1 --mixed
  res = !git reset --hard
  done = !git push origin HEAD
  # Reemplazado el alias 'save' por 'save-basic' para evitar conflictos
  save-basic = !git add -A && git commit -m 'chore: commit save point' --no-template
  # Para crear commits m√°s detallados, usar el script git-save.sh
  del = branch -D
  # Alias para commit r√°pido sin mostrar editor y sin usar plantilla
  cm = !git commit -m
[core]
  excludesfile = ~/.gitignore
	autocrlf = false
	longpaths = true
	eol = lf
	editor = nano
[merge]
  ff = only
[commit]
  template = ~/.gitmessage
  verbose = true
  gpgsign = false
[fetch]
  prune = true
[rebase]
  autosquash = true
[include]
  path = ~/.gitconfig.local
[diff]
  colorMoved = zebra
[user]
	name = Jes√∫s Erro
	email = olagato@gmail.com
[credential]
	helper = store
[safe]
	directory = /home/jesus/proyectos/nges
	directory = /home/jesus/proyectos/docker
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
  process = git-lfs filter-process 